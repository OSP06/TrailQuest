// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Existing models remain unchanged until User model...

model User {
  id         Int       @id @default(autoincrement())
  email      String    @unique
  createdAt  DateTime  @default(now())
  lastLogin  DateTime?
  profile    UserProfile?
  preferences Preference[]
  activities Activity[]
  // New gamification fields
  xp         Int       @default(0)
  level      Int       @default(1)
  achievements UserAchievement[]
  groupMemberships GroupMember[]
  verifications ChallengeVerification[]
  analyticsEvents AnalyticsEvent[]
  challengeResults GroupChallengeResult[]
  recommendations Recommendation[]
  recommendationInteractions RecommendationInteraction[]
  adventurePosts AdventurePost[]
}

// Add new gamification models
model Achievement {
  id          String     @id @default(uuid())
  name        String
  description String
  icon        String
  xpValue     Int
  type        AchievementType
  users       UserAchievement[]
  createdAt   DateTime   @default(now())
}

enum AchievementType {
  SKILL
  COMPLETION
  SOCIAL
  SEASONAL
}

model UserAchievement {
  userId        Int
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  achievementId String
  achievement   Achievement @relation(fields: [achievementId], references: [id], onDelete: Cascade)
  unlockedAt    DateTime    @default(now())

  @@id([userId, achievementId])
}

model SocialGroup {
  id          String      @id @default(uuid())
  name        String
  description String?
  members     GroupMember[]
  challenges  GroupChallenge[]
  createdAt   DateTime    @default(now())
}

model GroupMember {
  userId    Int
  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  groupId   String
  group     SocialGroup @relation(fields: [groupId], references: [id], onDelete: Cascade)
  role      GroupRole   @default(MEMBER)
  joinedAt  DateTime    @default(now())

  @@id([userId, groupId])
}

enum GroupRole {
  OWNER
  ADMIN
  MEMBER
}

model GroupChallenge {
  id          String      @id @default(uuid())
  groupId     String
  group       SocialGroup @relation(fields: [groupId], references: [id], onDelete: Cascade)
  name        String
  description String
  startDate   DateTime
  endDate     DateTime
  results     GroupChallengeResult[]
  createdAt   DateTime    @default(now())
}

model GroupChallengeResult {
  challengeId String
  challenge   GroupChallenge @relation(fields: [challengeId], references: [id], onDelete: Cascade)
  userId      Int
  user        User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  score       Float
  completedAt DateTime       @default(now())

  @@id([challengeId, userId])
}

model ChallengeVerification {
  id              String    @id @default(uuid())
  userId          Int
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  challengeId     String
  coordinates     Json
  verificationScore Float
  isOffline       Boolean   @default(false)
  deviceData      Json?
  verifiedAt      DateTime  @default(now())
}

model AnalyticsEvent {
  id        String   @id @default(uuid())
  userId    Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  eventType String
  data      Json
  timestamp DateTime @default(now())

  @@index([userId, eventType])
}

model Preference {
  id          Int      @id @default(autoincrement())
  userId      Int
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  key         String
  value       String
  createdAt   DateTime @default(now())
}

model Activity {
  id          Int      @id @default(autoincrement())
  userId      Int
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  type        String
  data        Json
  createdAt   DateTime @default(now())
}

model Recommendation {
  id          Int       @id @default(autoincrement())
  userId      Int
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  modelId     Int       @default(1) // 1 = Gemini
  expiresAt   DateTime
  createdAt   DateTime  @default(now())
  items       RecommendationItem[]
}

model RecommendationItem {
  id              Int       @id @default(autoincrement())
  recommendation  Recommendation @relation(fields: [recommendationId], references: [id], onDelete: Cascade)
  recommendationId Int
  activityType    String
  confidence      Float
  reason          String
  interactions    RecommendationInteraction[]
}

model RecommendationInteraction {
  id          Int       @id @default(autoincrement())
  userId      Int
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  itemId      Int
  item        RecommendationItem @relation(fields: [itemId], references: [id], onDelete: Cascade)
  type        RecommendationInteractionType
  timestamp   DateTime  @default(now())
  location    Json?     // GPS coordinates when interacted
  deviceData  Json?     // Device info for fraud detection
}

enum RecommendationInteractionType {
  VIEWED
  ACCEPTED
  REJECTED
  IGNORED
  COMPLETED
}

model AdventurePost {
  id          Int       @id @default(autoincrement())
  title       String?
  description String
  activityType String
  location    String
  stats       Json
  badges      String[]
  likes       Int
  comments    Int
  createdAt   DateTime  @default(now())
  userId      Int
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  images      AdventurePostImage[]
}

model AdventurePostImage {
  id        Int       @id @default(autoincrement())
  url       String
  postId    Int
  post      AdventurePost @relation(fields: [postId], references: [id], onDelete: Cascade)
  createdAt DateTime  @default(now())
}

// Existing models below remain unchanged...
model UserProfile {
  userId          Int      @id
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  location        String?
  lastActivityId  Int?
  lastInteraction DateTime?
}

// ... (rest of existing models remain exactly the same)
